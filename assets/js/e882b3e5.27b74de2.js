(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[903],{78044:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>r,metadata:()=>l,toc:()=>d,default:()=>u});var o=n(29603),i=n(50120),a=(n(27378),n(35318)),r={id:"uth-autofield-algorithm",title:"AutoField algorithm"},l={unversionedId:"uth-autofield-algorithm",id:"uth-autofield-algorithm",isDocsHomePage:!1,title:"AutoField algorithm",description:"Background",source:"@site/../docs/uth-autofield-algorithm.md",sourceDirName:".",slug:"/uth-autofield-algorithm",permalink:"/docs/uth-autofield-algorithm",version:"current",frontMatter:{id:"uth-autofield-algorithm",title:"AutoField algorithm"},sidebar:"docs",previous:{title:"Helpers",permalink:"/docs/api-helpers"},next:{title:"Bridge concept",permalink:"/docs/uth-bridge-concept"}},d=[{value:"Background",id:"background",children:[]},{value:"Default <code>AutoField</code> implementation",id:"default-autofield-implementation",children:[]},{value:"Overriding <code>AutoField</code>",id:"overriding-autofield",children:[]}],p={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"background"},"Background"),(0,a.kt)("p",null,"Since the beginning, ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoField")," was an ordinary React component. Then, in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/issues/741"},"#","741"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"kind")," parameter of ",(0,a.kt)("inlineCode",{parentName:"p"},"connectField")," was introduced to make certain optimizations possible. To be exact, this parameter made it possible to reduce the overhead of ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoField")," to minimum. The problem is that it increased the complexity of custom themes (or at least keeping them performant)."),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/issues/800"},"#","800"),", a new way of creating ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoField")," was introduced. Now, instead of a React component, you only specify the component based on its props - the rest is handled in ",(0,a.kt)("inlineCode",{parentName:"p"},"createAutoField"),"."),(0,a.kt)("h2",{id:"default-autofield-implementation"},"Default ",(0,a.kt)("inlineCode",{parentName:"h2"},"AutoField")," implementation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createAutoField } from 'uniforms';\n\nconst AutoField = createAutoField(props => {\n  if (props.allowedValues) {\n    return props.checkboxes && props.fieldType !== Array\n      ? RadioField\n      : SelectField;\n  }\n\n  switch (props.fieldType) {\n    case Array:\n      return ListField;\n    case Boolean:\n      return BoolField;\n    case Date:\n      return DateField;\n    case Number:\n      return NumField;\n    case Object:\n      return NestField;\n    case String:\n      return TextField;\n  }\n\n  return invariant(false, 'Unsupported field type: %s', props.fieldType);\n});\n")),(0,a.kt)("h2",{id:"overriding-autofield"},"Overriding ",(0,a.kt)("inlineCode",{parentName:"h2"},"AutoField")),(0,a.kt)("p",null,"While specifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoField")," prop on your ",(0,a.kt)("inlineCode",{parentName:"p"},"QuickForm")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoForm")," components may cover a lot of cases, some fields - ",(0,a.kt)("inlineCode",{parentName:"p"},"ListField")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"NestField")," - use ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoField")," directly. That means there's no easy way to let them know that you have a custom component defined."),(0,a.kt)("p",null,"To make it possible, all ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoFields")," created with the ",(0,a.kt)("inlineCode",{parentName:"p"},"createAutoField")," are configurable. To adjust the components, use the React context available in ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoField.componentDetectorContext"),". You can use it as often as needed - in most apps once will be enough. Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"<AutoField.componentDetectorContext.Provider value={(props, uniforms) => /* ... */}>\n  <Application />\n</AutoField.componentDetectorContext.Provider>\n")),(0,a.kt)("p",null,"If you want to add an exception and then fallback to the existing algorithm, use ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoField.defaultComponentDetector"),". Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"<AutoField.componentDetectorContext.Provider\n  value={(props, uniforms) => {\n    if (props.useSpecialField) {\n      return SpecialField;\n    }\n\n    return AutoField.defaultComponentDetector(props, uniforms);\n  }}\n>\n  <Application />\n</AutoField.componentDetectorContext.Provider>\n")))}u.isMDXComponent=!0}}]);