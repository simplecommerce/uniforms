(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[146],{1958:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>r,metadata:()=>l,toc:()=>m,default:()=>d});var a=n(29603),i=n(50120),o=(n(27378),n(35318)),r={id:"migrating-2-to-3",title:"Migrating v2 to v3"},l={unversionedId:"migrating-2-to-3",id:"migrating-2-to-3",isDocsHomePage:!1,title:"Migrating v2 to v3",description:"This guide is designed to help you through the migration. If you went through it and encountered any problems - do let us know. For more information on why certain changes were made, see the CHANGELOG.md. When migrating to v3, use the newest version. Gradual updates will take more time and won't ease this process.",source:"@site/../docs/migrating-2-to-3.md",sourceDirName:".",slug:"/migrating-2-to-3",permalink:"/docs/migrating-2-to-3",version:"current",frontMatter:{id:"migrating-2-to-3",title:"Migrating v2 to v3"},sidebar:"docs",previous:{title:"FAQ",permalink:"/docs/faq"},next:{title:"Basic uniforms usage",permalink:"/docs/tutorials-basic-uniforms-usage"}},m=[{value:"Breaking API changes",id:"breaking-api-changes",children:[]},{value:"Validation flow changes",id:"validation-flow-changes",children:[]},{value:"React Context API",id:"react-context-api",children:[]},{value:"TypeScript",id:"typescript",children:[]},{value:"Miscellaneous",id:"miscellaneous",children:[]}],s={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide is designed to help you through the migration. If you went through it and encountered any problems - do let us know. For more information on ",(0,o.kt)("em",{parentName:"p"},"why")," certain changes were made, see the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/CHANGELOG.md"},(0,o.kt)("inlineCode",{parentName:"a"},"CHANGELOG.md")),". When migrating to v3, use the newest version. Gradual updates will take more time and won't ease this process."),(0,o.kt)("h2",{id:"breaking-api-changes"},"Breaking API changes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Context data shape has changed: ",(0,o.kt)("inlineCode",{parentName:"li"},"changed"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"changedMap"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"submitting"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"validating")," were lifted from the ",(0,o.kt)("inlineCode",{parentName:"li"},"state")," property to the root."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"AutoForm.state.modelSync"),". Use ",(0,o.kt)("inlineCode",{parentName:"li"},"AutoForm.state.model")," instead."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"BaseField"),". Use ",(0,o.kt)("inlineCode",{parentName:"li"},"connectField")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"useField")," instead."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"BaseForm.getChangedKeys"),". Use ",(0,o.kt)("inlineCode",{parentName:"li"},"changedKeys")," directly."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"BaseForm.state.bridge"),". Use ",(0,o.kt)("inlineCode",{parentName:"li"},"BaseForm.props.schema")," instead."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"Bridge.check"),". Without ",(0,o.kt)("inlineCode",{parentName:"li"},"createSchemaBridge")," it's no longer needed."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"baseField")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"connectField")," options. There's no one solution here and it may require additional changes, depending on the usage."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"createSchemaBridge"),". Now all ",(0,o.kt)("inlineCode",{parentName:"li"},"*Bridge")," instances have to be created manually.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"  import { SimpleSchema } from 'simpl-schema';\n+ import { SimpleSchema2Bridge } from 'uniforms-bridge-simple-schema-2';\n  const schema = new SimpleSchema({ /* ... */ });\n- <AutoForm schema={schema} />\n+ const bridge = new SimpleSchema2Bridge(schema);\n+ <AutoForm schema={bridge} />\n"))),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"ensureValue")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"connectField")," options. That means ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined")," will no longer be automatically passed to the field as ",(0,o.kt)("inlineCode",{parentName:"li"},"''"),". Use ",(0,o.kt)("inlineCode",{parentName:"li"},"value ?? ''")," instead. ",(0,o.kt)("strong",{parentName:"li"},"This option was enabled by default, therefore it will impact all your custom fields"),"."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"includeParent")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"connectField")," options. Use ",(0,o.kt)("inlineCode",{parentName:"li"},"useField")," as many times as needed instead.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const parentName = joinName(joinName(null, props.name).slice(0, -1));\nconst parentField = useField(parentName, {}, { absoluteName: true })[0];\n"))),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"injectName"),". In most cases, it can be safely omitted."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"mapProps")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"connectField")," options. Map props directly in the component."),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"nothing"),". Use ",(0,o.kt)("inlineCode",{parentName:"li"},"null")," instead."),(0,o.kt)("li",{parentName:"ul"},"Removed all ",(0,o.kt)("inlineCode",{parentName:"li"},"propTypes")," in favor of TypeScript types."),(0,o.kt)("li",{parentName:"ul"},"Renamed or removed deprecated lifecycle methods. If you were using them, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"super.componentWillReceiveProps"),", check whether it's still there and use the correct name if needed."),(0,o.kt)("li",{parentName:"ul"},"Renamed ",(0,o.kt)("inlineCode",{parentName:"li"},"getChildContext*")," methods to ",(0,o.kt)("inlineCode",{parentName:"li"},"getContext*"),", e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"getChildContextName")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"getContextName"),"."),(0,o.kt)("li",{parentName:"ul"},"Synchronous return and throw in ",(0,o.kt)("inlineCode",{parentName:"li"},"onSubmit")," are no longer allowed. To return an error or some result, return a ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise")," instead."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"filterDOMProps.registered")," is now read-only.")),(0,o.kt)("h2",{id:"validation-flow-changes"},"Validation flow changes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Bridge validators have to return errors instead of throwing them.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"  // GraphQL Schema\n  function validator(model) {\n    if (errors.length) {\n-     throw { details: validator.errors };\n+     return { details: validator.errors };\n    }\n  }\n")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"  // JSON Schema\n  function createValidator(schema) {\n    const validator = ajv.compile(schema);\n    return (model) => {\n      validator(model);\n      if (validator.errors && validator.errors.length) {\n-       throw { details: validator.errors };\n+       return { details: validator.errors };\n      }\n    };\n  }\n"))),(0,o.kt)("li",{parentName:"ul"},"Removed ",(0,o.kt)("inlineCode",{parentName:"li"},"onSubmitSuccess")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"onSubmitFailure"),". Perform all needed operations directly in the ",(0,o.kt)("inlineCode",{parentName:"li"},"onSubmit"),":",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"- onSubmit={onSubmit}\n- onSubmitSuccess={onSubmitSuccess}\n- onSubmitFailure={onSubmitFailure}\n+ onSubmit={model => {\n+   const result = onSubmit(model);\n+   result.then(onSubmitSuccess, onSubmitFailure);\n+   return result;\n+ }}`\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onValidate")," is no longer using callbacks. The error (or the lack of it) has to be returned either synchronously or asynchronously (i.e. wrapped in a promise).",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"- onValidate={(model, error, done) => done(error)}\n+ onValidate={async (model, error) => error}\n")))),(0,o.kt)("h2",{id:"react-context-api"},"React Context API"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you were ",(0,o.kt)("strong",{parentName:"li"},"not")," using ",(0,o.kt)("inlineCode",{parentName:"li"},"context"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"contextTypes"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"childContextTypes"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"getChildContext*")," methods directly, there's nothing to do."),(0,o.kt)("li",{parentName:"ul"},"For direct context access, use ",(0,o.kt)("inlineCode",{parentName:"li"},"useForm")," hook (functional components), ",(0,o.kt)("inlineCode",{parentName:"li"},"contextType")," static property (class components), or ",(0,o.kt)("inlineCode",{parentName:"li"},"<context.Consumer />")," (both).",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The React context object, ",(0,o.kt)("inlineCode",{parentName:"li"},"context"),", is exported from the ",(0,o.kt)("inlineCode",{parentName:"li"},"uniforms")," package.")))),(0,o.kt)("h2",{id:"typescript"},"TypeScript"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A lot of types were added or changed. If you are using TypeScript, you may expect some type errors, as all components are no longer full of ",(0,o.kt)("inlineCode",{parentName:"li"},"any"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"filterDOMProps.register")," is now type safe and requires ",(0,o.kt)("inlineCode",{parentName:"li"},"FilterDOMProps")," interface extension.")),(0,o.kt)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For performance reasons ",(0,o.kt)("inlineCode",{parentName:"li"},"getField"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"getSubfields"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"getType")," of all bridges are now memoized. If possible, do the same for custom bridges for a potential performance gain."),(0,o.kt)("li",{parentName:"ul"},"Simplified ",(0,o.kt)("inlineCode",{parentName:"li"},"NumField")," in most themes as it works as expected in React 16 and later. If you have a custom ",(0,o.kt)("inlineCode",{parentName:"li"},"NumField")," in your project, do revise its implementation for a potential performance gain."),(0,o.kt)("li",{parentName:"ul"},"Stop using direct imports and use named ones instead. It'll let your bundler decide, which version it'll need.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"-import BaseForm from 'uniforms/BaseForm';\n+import { BaseForm } from 'uniforms';\n")))))}d.isMDXComponent=!0}}]);