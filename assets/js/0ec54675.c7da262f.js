(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[773],{33038:(e,o,t)=>{"use strict";t.r(o),t.d(o,{frontMatter:()=>i,metadata:()=>m,toc:()=>a,default:()=>c});var n=t(29603),r=t(50120),s=(t(27378),t(35318)),i={id:"examples-custom-form",title:"Custom form"},m={unversionedId:"examples-custom-form",id:"examples-custom-form",isDocsHomePage:!1,title:"Custom form",description:"In uniforms, every form is just an injectable set of functionalities.",source:"@site/../docs/examples-custom-form.md",sourceDirName:".",slug:"/examples-custom-form",permalink:"/docs/examples-custom-form",version:"current",frontMatter:{id:"examples-custom-form",title:"Custom form"},sidebar:"docs",previous:{title:"Custom bridge & validator",permalink:"/docs/examples-custom-bridge"},next:{title:"Forms",permalink:"/docs/api-forms"}},a=[{value:"<code>ModifierForm</code>",id:"modifierform",children:[]}],d={toc:a};function c(e){var o=e.components,t=(0,r.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,n.Z)({},d,t,{components:o,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In uniforms, every form is just an injectable set of functionalities.\nThus, we can live without many higher order components, using composed ones instead.\nIf you want to get a deeper dive into it, we encourage you to read the source of AutoForm or QuickForm in the core package."),(0,s.kt)("h3",{id:"modifierform"},(0,s.kt)("inlineCode",{parentName:"h3"},"ModifierForm")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { BaseForm } from 'uniforms';\n\nconst Modifier = parent =>\n  class extends parent {\n    // Expose injector.\n    //   It's not required, but recommended.\n    static Modifier = Modifier;\n\n    // Alter component display name.\n    //   It's not required, but recommended.\n    static displayName = `Modifier${parent.displayName}`;\n\n    // Here you can override any form methods or create additional ones.\n    getModel(mode) {\n      if (mode === 'submit') {\n        const doc = super.getModel('submit');\n        const keys = this.getContextSchema().getSubfields();\n\n        const update = keys.filter(key => doc[key] !== undefined);\n        const remove = keys.filter(key => doc[key] === undefined);\n\n        // It's a good idea to omit empty modifiers.\n        const $set = update.reduce(\n          (acc, key) => ({ ...acc, [key]: doc[key] }),\n          {}\n        );\n        const $unset = remove.reduce((acc, key) => ({ ...acc, [key]: '' }), {});\n\n        return { $set, $unset };\n      }\n\n      return super.getModel(mode);\n    }\n  };\n\n// Now we have to inject our functionality. This one is a ModifierForm. Use any\n// form component you want.\nconst ModifierForm = Modifier(BaseForm);\n")))}c.isMDXComponent=!0}}]);