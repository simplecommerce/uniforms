(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[269],{1509:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>l,metadata:()=>d,toc:()=>o,default:()=>m});var a=n(29603),r=n(50120),i=(n(27378),n(35318)),l={id:"api-helpers",title:"Helpers"},d={unversionedId:"api-helpers",id:"api-helpers",isDocsHomePage:!1,title:"Helpers",description:"connectField",source:"@site/../docs/api-helpers.md",sourceDirName:".",slug:"/api-helpers",permalink:"/docs/api-helpers",version:"current",frontMatter:{id:"api-helpers",title:"Helpers"},sidebar:"docs",previous:{title:"Context data",permalink:"/docs/api-context-data"},next:{title:"AutoField algorithm",permalink:"/docs/uth-autofield-algorithm"}},o=[{value:"<code>connectField</code>",id:"connectfield",children:[{value:"Field kinds",id:"field-kinds",children:[]}]},{value:"<code>changedKeys</code>",id:"changedkeys",children:[]},{value:"<code>filterDOMProps</code>",id:"filterdomprops",children:[{value:"Custom props",id:"custom-props",children:[]}]},{value:"<code>joinName</code>",id:"joinname",children:[]},{value:"<code>randomIds</code>",id:"randomids",children:[]},{value:"<code>useField</code>",id:"usefield",children:[]}],p={toc:o};function m(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"connectfield"},(0,i.kt)("inlineCode",{parentName:"h2"},"connectField")),(0,i.kt)("p",null,"Provides form management related props. The ",(0,i.kt)("inlineCode",{parentName:"p"},"connectField")," helper is a component wrapper, that provides various props related to the form management. It also adds the ",(0,i.kt)("inlineCode",{parentName:"p"},"Field")," suffix to the name of the wrapped component."),(0,i.kt)("p",null,"The table below lists all of the ",(0,i.kt)("strong",{parentName:"p"},"guaranteed")," props that will be passed to the wrapped component:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"changed")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Has field changed?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"disabled")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Is field disabled?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"error")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"object")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field scoped part of validation error.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"errorMessage")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field scoped validation error message.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"field")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"object")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field definition from schema.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"fields")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"arrayOf(string)")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Subfields names.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"fieldType")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"func")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"id")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field id - given or random.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"label")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field label.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"name")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field name.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"onChange")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"func(value, [name])")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Change field value.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"placeholder")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field placeholder.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"readOnly")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Is field read-only?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Show inline error?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"value")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Field value.")))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"connectField")," function accepts two arguments: the first one is a component and the second one is an ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function Example(props) {\n  /* ... */\n}\n\nconst ExampleField = connectField(Example, options);\n")),(0,i.kt)("p",null,"The table below lists all available options:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"initialValue")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Initial value check. If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", then after the first render the default value is set as value if no value is provided (",(0,i.kt)("inlineCode",{parentName:"td"},"undefined"),").")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"kind")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"'leaf'")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"'node'")),(0,i.kt)("td",{parentName:"tr",align:"center"},"See ",(0,i.kt)("a",{parentName:"td",href:"#field-kinds"},"Field kinds"),".")))),(0,i.kt)("h3",{id:"field-kinds"},"Field kinds"),(0,i.kt)("p",null,"Every field is either a ",(0,i.kt)("em",{parentName:"p"},"leaf")," or ",(0,i.kt)("em",{parentName:"p"},"node")," field. In the future, we could introduce new kinds to enable even more optimizations."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Leaf")," fields cannot have subfields. This allows us to perform some optimizations, like skipping the extra ",(0,i.kt)("inlineCode",{parentName:"li"},"Provider")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"connectField"),", effectively reducing the overhead down to a single ",(0,i.kt)("inlineCode",{parentName:"li"},"useField")," call.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It includes all input fields, like ",(0,i.kt)("inlineCode",{parentName:"li"},"NumField"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"SelectField")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"TextField"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Node")," fields can have subfields. Fields of the ",(0,i.kt)("em",{parentName:"li"},"leaf")," kind cannot have subfields.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It includes all combined and layout fields, like ",(0,i.kt)("inlineCode",{parentName:"li"},"ListField")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"NestField"),".")))),(0,i.kt)("p",null,"If you are not sure which one to use, do not use the ",(0,i.kt)("inlineCode",{parentName:"p"},"kind")," option at all - it'll default to the safest option (right now it's ",(0,i.kt)("inlineCode",{parentName:"p"},"node"),")."),(0,i.kt)("h2",{id:"changedkeys"},(0,i.kt)("inlineCode",{parentName:"h2"},"changedKeys")),(0,i.kt)("p",null,"Returns an array of changed keys between ",(0,i.kt)("inlineCode",{parentName:"p"},"valueA")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"valueB"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"root")," is the root key. For examples see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms/__tests__/changedKeys.ts"},(0,i.kt)("inlineCode",{parentName:"a"},"changedKeys")," tests"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { changedKeys } from 'uniforms';\n\nchangedKeys('a', { b: 1, c: 2 }, { b: 1 }); // ['a', 'a.c']\n")),(0,i.kt)("h2",{id:"filterdomprops"},(0,i.kt)("inlineCode",{parentName:"h2"},"filterDOMProps")),(0,i.kt)("p",null,"Removes all uniforms-related props, registered with ",(0,i.kt)("inlineCode",{parentName:"p"},"filterDOMProps.register"),". Use it in all places where you'd like to pass all unrelated props down and ",(0,i.kt)("inlineCode",{parentName:"p"},"useField")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"connectField")," provide you with the props."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { filterDOMProps } from 'uniforms';\n\nconst filteredProps = filterDOMProps(props);\n")),(0,i.kt)("h3",{id:"custom-props"},"Custom props"),(0,i.kt)("p",null,"It's often the case that your custom components will have a bunch of known properties, like ",(0,i.kt)("inlineCode",{parentName:"p"},"locale")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"userType"),". To ease the process of using them across the project, you can register them to make ",(0,i.kt)("inlineCode",{parentName:"p"},"filterDOMProps")," remove them as well. For example, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms-bridge-simple-schema/src/register.ts"},(0,i.kt)("inlineCode",{parentName:"a"},"SimpleSchemaBridge"))," registers all of the SimpleSchema-specific options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { filterDOMProps } from 'uniforms';\n\nfilterDOMProps({ example: 42 }); // { example: 42 }\nfilterDOMProps.registered.includes('example'); // false\nfilterDOMProps.register('example');\nfilterDOMProps.registered.includes('example'); // true\nfilterDOMProps({ example: 42 }); // {}\n")),(0,i.kt)("p",null,"As ",(0,i.kt)("inlineCode",{parentName:"p"},"filterDOMProps")," is fully typed, if you'd like to make it work with TypeScript, you have to extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"FilterDOMProps")," interface as well."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"declare module 'uniforms' {\n  interface FilterDOMProps {\n    propA: never;\n    propB: never;\n  }\n}\n\nfilterDOMProps.register('propA', 'propB');\n")),(0,i.kt)("h2",{id:"joinname"},(0,i.kt)("inlineCode",{parentName:"h2"},"joinName")),(0,i.kt)("p",null,"Safely joins partial field names. When the first param is null, returns an array of strings. Otherwise, returns a string. If you create a custom field with subfields, then it's better to use this helper than manually concatenating them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { joinName } from 'uniforms';\n\njoinName(null, 'a', 'b.c', 'd'); // ['a', 'b', 'c', 'd']\njoinName('a', 'b.c', 'd'); // 'a.b.c.d'\n")),(0,i.kt)("h2",{id:"randomids"},(0,i.kt)("inlineCode",{parentName:"h2"},"randomIds")),(0,i.kt)("p",null,"Generates random ID, based on given prefix. Use it, if you want to have random but deterministic strings. If no prefix is provided, a unique 'uniforms-X' prefix will be used generated."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { randomIds } from 'uniforms';\n\nconst randomId1 = randomIds();\nrandomId1(); // uniforms-0000-0000\nrandomId1(); // uniforms-0000-0001\nrandomId1(); // uniforms-0000-0002\n\nconst randomId2 = randomIds();\nrandomId2(); // uniforms-0001-0000\nrandomId2(); // uniforms-0001-0001\nrandomId2(); // uniforms-0001-0002\n\nconst randomId3 = randomIds('prefix');\nrandomId3(); // prefix-0000\nrandomId3(); // prefix-0001\nrandomId3(); // prefix-0002\n")),(0,i.kt)("h2",{id:"usefield"},(0,i.kt)("inlineCode",{parentName:"h2"},"useField")),(0,i.kt)("p",null,"A hook version of ",(0,i.kt)("a",{parentName:"p",href:"#connectfield"},(0,i.kt)("inlineCode",{parentName:"a"},"connectField")),". It receives three arguments: field name (string), field props (object), and optional options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function Example(props) {\n  const [fieldProps, context] = useField(props.name, props, options);\n  return <input {...filterDOMProps(fieldProps)} />;\n}\n")),(0,i.kt)("p",null,"The table below lists all available options:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"absoluteName")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"center"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", ignores the name from context.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"initialValue")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Initial value check. If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", then after the first render the default value is set as value if no value is provided (",(0,i.kt)("inlineCode",{parentName:"td"},"undefined"),").")))))}m.isMDXComponent=!0}}]);